knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(ISLR)
library(insuranceData)
market <- Smarket
str(market)
set.seed(1)
library(tidyverse)
library(ggplot2)
?boot
#First make a function of what you want to achieve like here we want sd
calculate_sd_Smarket <- function(data_vector, index){
return(sd(data_vector[index]))
}
## This is why
#sd(market[,"Today"])
#Then choose the column we want to bootstrap with func.
sd_market_boot<- boot(market$Today, calculate_sd_Smarket, R=1000)
sd_market_boot$t %>%
#Rename . to t_stat
data_frame(t_stat=.) %>%
ggplot(aes(x =t_stat))+
geom_histogram(color="black", fill="blue", bins=30)+
theme_minimal()+
labs(title="Bootstrap Distribution of Volatility", x= "Estimated Vol", y= "Density")
?boot.ci
conf_intervals <- boot.ci(sd_market_boot, conf = 0.95 , type="norm")
print(conf_intervals)
conf_intervals_perc<- boot.ci(sd_market_boot, conf = 0.95 , type="perc")
print(conf_intervals_perc)
model_sq_returns_Smarket <- lm(Today^2 ~ Lag1^2, data = market)
summary(model_sq_returns_Smarket)
## Task 1e – Beregn bootstrap-standardfeil for koeffisienten til (Lag1)^2
library(boot)
# Definer funksjon som returnerer koeffisienten til (Lag1)^2 i modellen
bootstrap_lag1_squared <- function(data, index) {
sampled_data <- data[index, ]
model <- lm(I(Today^2) ~ I(Lag1^2), data = sampled_data)
return(coef(model)[["I(Lag1^2)"]])  # Navngitt tilgang til koeffisient
}
# Sett frø for reproduserbarhet
set.seed(1)
# Kjør bootstrap med 1000 replikasjoner
boot_result <- boot(
data = market,
statistic = bootstrap_lag1_squared,
R = 1000
)
# Beregn standardavviket (standardfeilen) til koeffisienten
boot_se <- sd(boot_result$t)
cat("Bootstrap-estimert standardfeil:", round(boot_se, 5), "\n")
# Sammenlign med OLS-resultatet fra Task 1d
ols_model <- summary(model_sq_returns_Smarket)
cat("OLS standardfeil for koeffisienten:", round(ols_model$coefficients["Lag1", "Std. Error"], 5), "\n")
library(insuranceData)
data("dataCar")
str(dataCar)
task2a<- dataCar %>%
filter(clm!= 0) %>%
select(-X_OBSTAT_)
str(task2a)
library(ggplot2)
task2b<- task2a %>%
select(-clm) %>%
mutate(
veh_age = as_factor(veh_age),
agecat = as_factor(veh_age),
)
#Find that it has 3 values
#ggplot(aes(x=numclaims))+ geom_histogram()
str(task2b)
# Load the tidymodels meta-package for modeling and resampling
library(tidymodels)
# Set seed for reproducibility
set.seed(123)
# Create 10-fold cross-validation splits from the task2b dataset
folds <- vfold_cv(task2b, v = 10)
# Specify a linear regression model using the "lm" engine
linmod <- linear_reg() %>% set_engine("lm")
# ---- FULL MODEL ----
# Build a workflow:
# Add the linear model and a recipe using all predictors (.) to predict claimcst0
full_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ ., data = task2b))
# Perform resampling (cross-validation) using the full model
full_res <- fit_resamples(full_wf, resamples = folds)
# Extract RMSE metric, and label it as "Fullmodell"
full_rmse <- collect_metrics(full_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Fullmodell")
# ---- INTERCEPT-ONLY MODEL ----
# Build a workflow:
# Only include intercept (no predictors)
int_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ 1, data = task2b))
# Perform resampling using the intercept-only model
int_res <- fit_resamples(int_wf, resamples = folds)
# Extract RMSE and label it as "Intercept-only"
int_rmse <- collect_metrics(int_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Intercept-only")
# ---- SIMPLE MODELS: ONE PREDICTOR AT A TIME ----
# Extract all predictor names except the response variable
vars <- names(task2b)[names(task2b) != "claimcst0"]
# Loop through each predictor and:
# 1) Build a workflow with just that predictor
# 2) Run CV
# 3) Collect RMSE and attach the variable name
simple_rmses <- map_dfr(vars, function(v) {
wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(as.formula(paste("claimcst0 ~", v)), data = task2b))
res <- fit_resamples(wf, resamples = folds)
collect_metrics(res) %>%
filter(.metric == "rmse") %>%
mutate(modell = v)
})
# ---- COMBINE RESULTS ----
# Combine RMSE results from full model, intercept-only, and simple models
all_rmse <- bind_rows(full_rmse, int_rmse, simple_rmses)
# Print a nicely formatted table with RMSE, sorted by mean error
all_rmse %>%
arrange(mean) %>%
select(modell, mean, std_err) %>%
knitr::kable(digits = 3, caption = "RMSE fra 10-fold kryssvalidering")
# Output the full data frame to view all columns if needed
print(all_rmse)
library(gam)
# Modell: antall krav som funksjon av bilverdi, eksponering og skadebeløp (numeriske) + faktorer
model <- gam(numclaims ~
s(veh_value, df=4) +
s(exposure, df=4) +
s(claimcst0, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = task2b)
#summary(model)
par(mfrow=c(2,2))
plot(model, se=TRUE, col="blue")
model_refined <- gam(numclaims ~
s(exposure, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = train)
pred <- predict(model_refined, newdata = test, type = "response")
mse <- mean((test$numclaims - pred)^2)
mse
# Load the tidymodels meta-package for modeling and resampling
library(tidymodels)
# Set seed for reproducibility
set.seed(123)
# Create 10-fold cross-validation splits from the task2b dataset
folds <- vfold_cv(task2b, v = 10)
# Specify a linear regression model using the "lm" engine
linmod <- linear_reg() %>%
set_engine("lm")
# ---- FULL MODEL ----
# Build a workflow:
# Add the linear model and a recipe using all predictors (.) to predict claimcst0
full_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ ., data = task2b))
# Perform resampling (cross-validation) using the full model
full_res <- fit_resamples(full_wf, resamples = folds)
# Extract RMSE metric, and label it as "Fullmodell"
full_rmse <- collect_metrics(full_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Fullmodell")
# ---- INTERCEPT-ONLY MODEL ----
# Build a workflow:
# Only include intercept (no predictors)
int_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ 1, data = task2b))
# Perform resampling using the intercept-only model
int_res <- fit_resamples(int_wf, resamples = folds)
# Extract RMSE and label it as "Intercept-only"
int_rmse <- collect_metrics(int_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Intercept-only")
# ---- SIMPLE MODELS: ONE PREDICTOR AT A TIME ----
# Extract all predictor names except the response variable
vars <- names(task2b)[names(task2b) != "claimcst0"]
# Loop through each predictor and:
# 1) Build a workflow with just that predictor
# 2) Run CV
# 3) Collect RMSE and attach the variable name
simple_rmses <- map_dfr(vars, function(v) {
wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(as.formula(paste("claimcst0 ~", v)), data = task2b))
res <- fit_resamples(wf, resamples = folds)
collect_metrics(res) %>%
filter(.metric == "rmse") %>%
mutate(modell = v)
})
# ---- COMBINE RESULTS ----
# Combine RMSE results from full model, intercept-only, and simple models
all_rmse <- bind_rows(full_rmse, int_rmse, simple_rmses)
# Print a nicely formatted table with RMSE, sorted by mean error
all_rmse %>%
arrange(mean) %>%
select(modell, mean, std_err) %>%
knitr::kable(digits = 3, caption = "RMSE fra 10-fold kryssvalidering")
# Output the full data frame to view all columns if needed
print(all_rmse)
model_refined <- gam(numclaims ~
s(exposure, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = train)
pred <- predict(model_refined, newdata = test, type = "response")
mse <- mean((test$numclaims - pred)^2)
mse
model_refined <- gam(numclaims ~
s(exposure, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = train)
pred <- predict(model_refined, newdata = test, type = "response")
mse <- mean((test$numclaims - pred)^2)
mse
model_refined <- gam(numclaims ~
s(exposure, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = train)
pred <- predict(model_refined, newdata = test, type = "response")
mse <- mean((test$numclaims - pred)^2)
mse
?boot.ci
conf_intervals <- boot.ci(sd_market_boot, conf = 0.95 , type="norm")
print(conf_intervals)
model_sq_returns_Smarket <- lm(I(Today^2) ~ I(Lag1^2), data = market)
summary(model_sq_returns_Smarket)
model_sq_returns_Smarket <- lm(I(Today^2) ~ I(Lag1^2), data = market)
summary(model_sq_returns_Smarket)
volcoef=function(xdata,index) lm(I(Today^2)~I(Lag1^2),
data=market[index,])$coefficients[2]
## Task 1e – Beregn bootstrap-standardfeil for koeffisienten til (Lag1)^2
library(boot)
volcoef=function(xdata,index) lm(I(Today^2)~I(Lag1^2),
data=market[index,])$coefficients[2]
boot.volcoef=boot(Smarket,volcoef,R=1000)
boot.volcoef
## Task 1e – Beregn bootstrap-standardfeil for koeffisienten til (Lag1)^2
library(boot)
volcoef=function(market,index) lm(I(Today^2)~I(Lag1^2),
data=market[index,])$coefficients[2]
boot.volcoef=boot(Smarket,volcoef,R=1000)
boot.volcoef
## Task 1e – Beregn bootstrap-standardfeil for koeffisienten til (Lag1)^2
library(boot)
# Definer funksjon som returnerer koeffisienten til (Lag1)^2 i modellen
bootstrap_lag1_squared <- function(data, index) {
sampled_data <- data[index, ]
model <- lm(I(Today^2) ~ I(Lag1^2), data = sampled_data)
return(coef(model)[["I(Lag1^2)"]])  # Navngitt tilgang til koeffisient
}
# Sett frø for reproduserbarhet
set.seed(1)
# Kjør bootstrap med 1000 replikasjoner
boot_result <- boot(
data = market,
statistic = bootstrap_lag1_squared,
R = 1000
)
# Beregn standardavviket (standardfeilen) til koeffisienten
boot_se <- sd(boot_result$t)
cat("Bootstrap-estimert standardfeil:", round(boot_se, 5), "\n")
# Sammenlign med OLS-resultatet fra Task 1d
ols_model <- summary(model_sq_returns_Smarket)
cat("OLS standardfeil for koeffisienten:", round(ols_model$coefficients["Lag1", "Std. Error"], 5), "\n")
## Task 1e – Beregn bootstrap-standardfeil for koeffisienten til (Lag1)^2
library(boot)
# Definer funksjon som returnerer koeffisienten til (Lag1)^2 i modellen
bootstrap_lag1_squared <- function(data, index) {
sampled_data <- data[index, ]
model <- lm(I(Today^2) ~ I(Lag1^2), data = sampled_data)
return(coef(model)[["I(Lag1^2)"]])  # Navngitt tilgang til koeffisient
}
# Sett frø for reproduserbarhet
set.seed(1)
# Kjør bootstrap med 1000 replikasjoner
boot_result <- boot(
data = market,
statistic = bootstrap_lag1_squared,
R = 1000
)
# Beregn standardavviket (standardfeilen) til koeffisienten
boot_se <- sd(boot_result$t)
cat("Bootstrap-estimert standardfeil:", round(boot_se, 5), "\n")
# Sammenlign med OLS-resultatet fra Task 1d
ols_model <- summary(model_sq_returns_Smarket)
cat("OLS standardfeil for koeffisienten:", round(ols_model$coefficients["Lag1", "Std. Error"], 5), "\n")
library(insuranceData)
data("dataCar")
str(dataCar)
task2a<- dataCar %>%
filter(clm!= 0) %>%
select(-X_OBSTAT_)
str(task2a)
library(boot)
volcoef <- function(data, index) {
coef(lm(I(Today^2) ~ I(Lag1^2), data = data[index, ]))[2]
}
set.seed(1)
boot.volcoef <- boot(Smarket, volcoef, R = 1000)
# Bootstrap-estimert standardfeil
sd(boot.volcoef$t)
# Standardfeil fra lineær regresjon
summary(lm(I(Today^2) ~ I(Lag1^2), data = Smarket))$coefficients[2, 2]
library(boot)  # Load the 'boot' package for bootstrap functionality
volcoef <- function(data, index) {
# Define a function that returns the coefficient of Lag1^2
# from a regression of Today^2 on Lag1^2 using a bootstrap sample
coef(lm(I(Today^2) ~ I(Lag1^2), data = data[index, ]))[2]
}
set.seed(1)  # Set seed for reproducibility
boot.volcoef <- boot(Smarket, volcoef, R = 1000)
# Perform bootstrap with 1000 replications to estimate the coefficient's sampling distribution
sd(boot.volcoef$t)
# Calculate the bootstrap estimate of the standard error for the coefficient
summary(lm(I(Today^2) ~ I(Lag1^2), data = Smarket))$coefficients[2, 2]
# Extract the standard error of the coefficient from the linear regression output
# Load the tidymodels meta-package for modeling and resampling
library(tidymodels)
# Load yardstick to access the mse() metric
library(yardstick)
# Set seed for reproducibility
set.seed(123)
# Create 10-fold cross-validation splits from the task2b dataset
folds <- vfold_cv(task2b, v = 10)
# Specify a linear regression model using the "lm" engine
linmod <- linear_reg() %>%
set_engine("lm")
# Define a custom metric set that includes only MSE
mymetrics <- metric_set(mse)
# ---- FULL MODEL ----
# Build a workflow with all predictors (.) to predict claimcst0
full_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ ., data = task2b))
# Perform 10-fold cross-validation using MSE
full_res <- fit_resamples(full_wf, resamples = folds, metrics = mymetrics)
# Extract MSE from the results and label it as "Full model"
full_mse <- collect_metrics(full_res) %>%
filter(.metric == "mse") %>%
mutate(model = "Full model")
# ---- INTERCEPT-ONLY MODEL ----
# Build a workflow with only the intercept (no predictors)
int_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ 1, data = task2b))
# Perform cross-validation using MSE
int_res <- fit_resamples(int_wf, resamples = folds, metrics = mymetrics)
# Extract MSE and label it as "Intercept-only"
int_mse <- collect_metrics(int_res) %>%
filter(.metric == "mse") %>%
mutate(model = "Intercept-only")
# ---- SIMPLE MODELS: ONE PREDICTOR AT A TIME ----
# Extract all predictor names except the response variable
vars <- names(task2b)[names(task2b) != "claimcst0"]
# Loop over each predictor:
# 1) Build a workflow with that predictor
# 2) Perform cross-validation
# 3) Extract MSE and label with the variable name
simple_mses <- map_dfr(vars, function(v) {
wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(as.formula(paste("claimcst0 ~", v)), data = task2b))
res <- fit_resamples(wf, resamples = folds, metrics = mymetrics)
collect_metrics(res) %>%
filter(.metric == "mse") %>%
mutate(model = v)
})
# Load the tidymodels meta-package for modeling and resampling
library(tidymodels)
# Set seed for reproducibility
set.seed(123)
# Create 10-fold cross-validation splits from the task2b dataset
folds <- vfold_cv(task2b, v = 10)
# Specify a linear regression model using the "lm" engine
linmod <- linear_reg() %>%
set_engine("lm")
# ---- FULL MODEL ----
# Build a workflow:
# Add the linear model and a recipe using all predictors (.) to predict claimcst0
full_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ ., data = task2b))
# Perform resampling (cross-validation) using the full model
full_res <- fit_resamples(full_wf, resamples = folds)
# Extract RMSE metric, and label it as "Fullmodell"
full_rmse <- collect_metrics(full_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Fullmodell")
# ---- INTERCEPT-ONLY MODEL ----
# Build a workflow:
# Only include intercept (no predictors)
int_wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(claimcst0 ~ 1, data = task2b))
# Perform resampling using the intercept-only model
int_res <- fit_resamples(int_wf, resamples = folds)
# Extract RMSE and label it as "Intercept-only"
int_rmse <- collect_metrics(int_res) %>%
filter(.metric == "rmse") %>%
mutate(modell = "Intercept-only")
# ---- SIMPLE MODELS: ONE PREDICTOR AT A TIME ----
# Extract all predictor names except the response variable
vars <- names(task2b)[names(task2b) != "claimcst0"]
# Loop through each predictor and:
# 1) Build a workflow with just that predictor
# 2) Run CV
# 3) Collect RMSE and attach the variable name
simple_rmses <- map_dfr(vars, function(v) {
wf <- workflow() %>%
add_model(linmod) %>%
add_recipe(recipe(as.formula(paste("claimcst0 ~", v)), data = task2b))
res <- fit_resamples(wf, resamples = folds)
collect_metrics(res) %>%
filter(.metric == "rmse") %>%
mutate(modell = v)
})
# ---- COMBINE RESULTS ----
# Combine RMSE results from full model, intercept-only, and simple models
all_rmse <- bind_rows(full_rmse, int_rmse, simple_rmses)
# Print a nicely formatted table with RMSE, sorted by mean error
all_rmse %>%
arrange(mean) %>%
select(modell, mean, std_err) %>%
knitr::kable(digits = 3, caption = "RMSE fra 10-fold kryssvalidering")
# Output the full data frame to view all columns if needed
print(all_rmse)
plot(gam1,terms=c("s(veh_value)","s(exposure)","s(numclaims)"))
library(gam)
gam1=gam(claimcst0~s(veh_value)+s(exposure)+s(numclaims)+
veh_body+veh_age+gender+area+agecat,data=market)
par(mfrow=c(2,2))
plot(gam1,terms=c("s(veh_value)","s(exposure)","s(numclaims)"))
library(gam)
gam1=gam(claimcst0~s(veh_value)+s(exposure)+s(numclaims)+
veh_body+veh_age+gender+area+agecat,data=market)
par(mfrow=c(2,2))
plot(gam1,terms=c("s(veh_value)","s(exposure)","s(numclaims)"))
library(gam)
# Modell: antall krav som funksjon av bilverdi, eksponering og skadebeløp (numeriske) + faktorer
model <- gam(numclaims ~
s(veh_value, df=4) +
s(exposure, df=4) +
s(claimcst0, df=4) +
veh_body + veh_age + gender + area + agecat,
family = poisson, data = task2b)
#summary(model)
par(mfrow=c(2,2))
plot(model, se=TRUE, col="blue")
library(gam)
gam1=gam(claimcst0~s(veh_value)+s(exposure)+s(numclaims)+
veh_body+veh_age+gender+area+agecat,data=task2b)
par(mfrow=c(2,2))
plot(gam1,terms=c("s(veh_value)","s(exposure)","s(numclaims)"))
